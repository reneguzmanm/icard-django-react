{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursos\\\\Full\\\\icard\\\\icard_react\\\\icard\\\\src\\\\pages\\\\Client\\\\OrdersHistory.js\",\n    _s = $RefreshSig$();\n\nimport { forEach, map, size } from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useOrder, usePayment, useTable } from \"../../hooks\";\nimport { OrderHistoryItem } from '../../components/Client/';\nimport { ModalConfirm } from \"../../components/Common\";\nimport { Button } from 'semantic-ui-react';\nimport { number } from 'yup';\nimport { getPaymentByTableApi } from '../../api/payment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function OrdersHistory() {\n  _s();\n\n  const [idTable, setIdTable] = useState(null);\n  const [showTypePayment, setShowTypePayment] = useState(false);\n  const {\n    getOrdersByTable,\n    loading,\n    orders,\n    addPaymentToOrder\n  } = useOrder();\n  const {\n    getTableByNumber\n  } = useTable();\n  const {\n    tableNumber\n  } = useParams();\n  const {\n    createPayment,\n    getPaymentByTable\n  } = usePayment();\n  useEffect(() => {\n    (async () => {\n      const table = await getTableByNumber(tableNumber);\n      const idTableTemp = table[0].id;\n      setIdTable(idTableTemp);\n      getOrdersByTable(idTable, \"\", \"ordering=-status,-created_at\");\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      const response = await getPaymentByTable(idTable);\n    })();\n  }, [idTable]);\n\n  const onCreatePayment = async paymentType => {\n    setShowTypePayment(false);\n    let totalPayment = 0;\n    forEach(orders, order => {\n      totalPayment += Number(order.product_data.price);\n    });\n    const paymentData = {\n      table: idTable,\n      totalPayment: totalPayment.toFixed(2),\n      paymentType,\n      statusPayment: \"PENDING\"\n    };\n    const payment = await createPayment(paymentData);\n\n    for await (const order of orders) {\n      await addPaymentToOrder(order.id, payment.id);\n    }\n\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Historial de pedidos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [size(orders) > 0 && /*#__PURE__*/_jsxDEV(Button, {\n        primary: true,\n        fluid: true,\n        onClick: () => setShowTypePayment(true),\n        children: \"Pedir la cuenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }, this), map(orders, order => /*#__PURE__*/_jsxDEV(OrderHistoryItem, {\n        order: order\n      }, order.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ModalConfirm, {\n      title: \"Pagar con tarjeta o efectivo\",\n      show: showTypePayment,\n      onCloseText: \"Efectivo\",\n      onClose: () => onCreatePayment('CASH'),\n      onConfirmText: \"Tarjeta\",\n      onConfirm: () => onCreatePayment('CARD')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OrdersHistory, \"llCUGS308Q5JlrMyZcRs0RqwLTQ=\", false, function () {\n  return [useOrder, useTable, useParams, usePayment];\n});\n\n_c = OrdersHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersHistory\");","map":{"version":3,"sources":["C:/Cursos/Full/icard/icard_react/icard/src/pages/Client/OrdersHistory.js"],"names":["forEach","map","size","React","useState","useEffect","useParams","useOrder","usePayment","useTable","OrderHistoryItem","ModalConfirm","Button","number","getPaymentByTableApi","OrdersHistory","idTable","setIdTable","showTypePayment","setShowTypePayment","getOrdersByTable","loading","orders","addPaymentToOrder","getTableByNumber","tableNumber","createPayment","getPaymentByTable","table","idTableTemp","id","response","onCreatePayment","paymentType","totalPayment","order","Number","product_data","price","paymentData","toFixed","statusPayment","payment","window","location","reload"],"mappings":"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","sourcesContent":["import { forEach, map, size } from 'lodash';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useOrder, usePayment, useTable } from \"../../hooks\";\r\nimport { OrderHistoryItem } from '../../components/Client/';\r\nimport { ModalConfirm } from \"../../components/Common\";\r\nimport { Button } from 'semantic-ui-react';\r\nimport { number } from 'yup';\r\nimport { getPaymentByTableApi } from '../../api/payment';\r\n\r\nexport function OrdersHistory() {\r\n    const [idTable, setIdTable] = useState(null);\r\n    const [showTypePayment, setShowTypePayment] = useState(false);\r\n    const { getOrdersByTable, loading, orders, addPaymentToOrder } = useOrder();\r\n    const { getTableByNumber } = useTable();\r\n    const { tableNumber } = useParams();\r\n    const { createPayment, getPaymentByTable } = usePayment();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const table = await getTableByNumber(tableNumber);\r\n            const idTableTemp = table[0].id;\r\n            setIdTable(idTableTemp);\r\n            getOrdersByTable(idTable, \"\", \"ordering=-status,-created_at\");\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      (async ()=>{\r\n        const response = await getPaymentByTable(idTable);\r\n\r\n      })()\r\n    }, [idTable])\r\n    \r\n\r\n    const onCreatePayment = async (paymentType) =>{\r\n        setShowTypePayment(false);\r\n        \r\n        let totalPayment = 0;\r\n        forEach(orders, (order) =>{\r\n            totalPayment += Number(order.product_data.price);\r\n        });\r\n\r\n        const paymentData = {\r\n            table: idTable,\r\n            totalPayment: totalPayment.toFixed(2),\r\n            paymentType,\r\n            statusPayment: \"PENDING\",\r\n        };\r\n\r\n        const payment = await createPayment(paymentData);\r\n\r\n        for await (const order of orders){\r\n            await addPaymentToOrder(order.id, payment.id);\r\n        }\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Historial de pedidos</h1>\r\n            {\r\n                loading ? (\r\n                    <p>Cargando...</p>\r\n                ) : (\r\n                    <>\r\n                        {size(orders) > 0 && (\r\n                            <Button primary fluid onClick={() => setShowTypePayment(true)}>\r\n                                Pedir la cuenta\r\n                            </Button>\r\n                        )}\r\n                        {map(orders, (order) => (\r\n                            <OrderHistoryItem key={order.id} order={order} />\r\n                        ))}\r\n                    </>\r\n                )}\r\n            <ModalConfirm\r\n                title=\"Pagar con tarjeta o efectivo\"\r\n                show={showTypePayment}\r\n                onCloseText=\"Efectivo\"\r\n                onClose={() => onCreatePayment('CASH')}\r\n                onConfirmText=\"Tarjeta\"\r\n                onConfirm={() => onCreatePayment('CARD')}\r\n            />\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}