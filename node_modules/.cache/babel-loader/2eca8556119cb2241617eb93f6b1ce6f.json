{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursos\\\\Full\\\\icard\\\\icard_react\\\\icard\\\\src\\\\components\\\\Admin\\\\Orders\\\\AddOrderForm\\\\AddOrderForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./AddOrderForm.scss\";\nimport { Form, Image, Button, Dropdown } from 'semantic-ui-react';\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { useProduct } from '../../../../hooks';\nimport { map } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AddOrderForm(props) {\n  _s();\n\n  const {\n    idTable,\n    openCLoseModal\n  } = props;\n  const [productsFormat, setProductsFormat] = useState([]);\n  const [productsData, setProductsData] = useState([]);\n  const {\n    products,\n    getProducts\n  } = useProduct();\n  useEffect(() => getProducts(), []);\n  useEffect(() => setProductsFormat(formatDropdownData(products)), [products]);\n  const formik = useFormik({\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    validateOnChange: false,\n    onSubmit: async formValue => {\n      console.log(\"Creando Pedidos\");\n      console.log(formValue);\n    }\n  });\n\n  const addProductList = async () => {\n    try {\n      const producstId = formik.values.products;\n      const arrayTemp = [];\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"add-order-form\",\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n      placeholder: \"Productos\",\n      fluid: true,\n      selection: true,\n      search: true,\n      options: productsFormat,\n      value: null,\n      onChange: (_, data) => formik.setFieldValue(\"products\", [...formik.values.products, data.value])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-order-form__list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      content: \"A\\xF1adir productos a la mesa\",\n      primary: true,\n      fluid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddOrderForm, \"MpPswjVSmYW2CbWHlzJOSgzbDb8=\", false, function () {\n  return [useProduct, useFormik];\n});\n\n_c = AddOrderForm;\n\nfunction formatDropdownData(data) {\n  return map(data, item => ({\n    key: item.id,\n    text: item.title,\n    value: item.id\n  }));\n}\n\nfunction initialValues() {\n  return {\n    products: []\n  };\n}\n\nfunction validationSchema() {\n  return {\n    products: Yup.array().required(true)\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddOrderForm\");","map":{"version":3,"sources":["C:/Cursos/Full/icard/icard_react/icard/src/components/Admin/Orders/AddOrderForm/AddOrderForm.js"],"names":["React","useState","useEffect","Form","Image","Button","Dropdown","useFormik","Yup","useProduct","map","AddOrderForm","props","idTable","openCLoseModal","productsFormat","setProductsFormat","productsData","setProductsData","products","getProducts","formatDropdownData","formik","initialValues","validationSchema","object","validateOnChange","onSubmit","formValue","console","log","addProductList","producstId","values","arrayTemp","error","handleSubmit","_","data","setFieldValue","value","item","key","id","text","title","array","required"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./AddOrderForm.scss\";\r\nimport { Form, Image, Button, Dropdown } from 'semantic-ui-react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport { useProduct } from '../../../../hooks';\r\nimport { map } from 'lodash';\r\n\r\n\r\nexport function AddOrderForm(props) {\r\n    const {idTable, openCLoseModal} = props;\r\n    const [productsFormat, setProductsFormat] = useState([])\r\n    const [productsData, setProductsData] = useState([])\r\n    const {products, getProducts} = useProduct();\r\n\r\n    useEffect(() => getProducts(), []);\r\n    useEffect(() => setProductsFormat(formatDropdownData(products)), [products]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues(),\r\n        validationSchema: Yup.object(validationSchema()),\r\n        validateOnChange: false,\r\n        onSubmit: async (formValue) => {\r\n            console.log(\"Creando Pedidos\");\r\n            console.log(formValue);\r\n        },\r\n    });\r\n\r\n    const addProductList = async () => {\r\n        try {\r\n            const producstId = formik.values.products;\r\n\r\n            const arrayTemp = [];\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    \r\n  return (\r\n    <Form className='add-order-form' onSubmit={formik.handleSubmit}>\r\n        <Dropdown \r\n            placeholder='Productos' \r\n            fluid \r\n            selection \r\n            search \r\n            options={productsFormat} \r\n            value={null}\r\n            onChange={(_, data) => formik.setFieldValue(\"products\", [...formik.values.products, data.value,])}\r\n        />\r\n        <div className='add-order-form__list'>\r\n            {/* for de productos seleccionados*/}\r\n        </div>\r\n        <Button \r\n            type='submit' \r\n            content=\"AÃ±adir productos a la mesa\"\r\n            primary \r\n            fluid \r\n        />\r\n    </Form>\r\n  );\r\n}\r\n\r\nfunction formatDropdownData(data){\r\n    return map(data, (item) => ({\r\n        key: item.id,\r\n        text: item.title,\r\n        value: item.id,\r\n    }))\r\n}\r\n\r\nfunction initialValues(){\r\n    return{\r\n        products: [],\r\n    }\r\n}\r\n\r\nfunction validationSchema(){\r\n    return{\r\n        products: Yup.array().required(true),\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}