{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { getTablesApi, addTableApi, updateTableApi, deleteTableApi } from \"../api/table\";\nimport { useAuth } from \"./\";\nexport function useTable() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [tables, setTables] = useState(null);\n  const [table, settable] = useState(second);\n  const {\n    auth\n  } = useAuth();\n\n  const getTables = async () => {\n    try {\n      setLoading(true);\n      const response = await getTablesApi(auth.token);\n      setLoading(false);\n      setTables(response);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const addTable = async data => {\n    try {\n      setLoading(true);\n      await addTableApi(data, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const updateTable = async (id, data) => {\n    try {\n      setLoading(true);\n      await updateTableApi(id, data, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const deleteTable = async id => {\n    try {\n      setLoading(true);\n      await deleteTableApi(id, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const getTable = async idTable => {\n    try {\n      setLoading(true);\n      const response = await getTableApi(idTable);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  return {\n    loading,\n    error,\n    tables,\n    getTables,\n    addTable,\n    updateTable,\n    deleteTable\n  };\n}\n\n_s(useTable, \"BId9f8NfAa4GrVAxynBf130fKAI=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"sources":["C:/Cursos/Full/icard/icard_react/icard/src/hooks/useTable.js"],"names":["useState","getTablesApi","addTableApi","updateTableApi","deleteTableApi","useAuth","useTable","loading","setLoading","error","setError","tables","setTables","table","settable","second","auth","getTables","response","token","addTable","data","updateTable","id","deleteTable","getTable","idTable","getTableApi"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { getTablesApi, addTableApi, updateTableApi, deleteTableApi } from \"../api/table\";\r\nimport { useAuth } from \"./\";\r\n\r\nexport function useTable(){\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [tables, setTables] = useState(null);\r\n    const [table, settable] = useState(second)\r\n\r\n    const { auth } = useAuth();\r\n\r\n    const getTables = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await getTablesApi(auth.token);\r\n            setLoading(false);\r\n            setTables(response);    \r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    };\r\n\r\n    const addTable = async (data) =>{\r\n        try {\r\n            setLoading(true);\r\n            await addTableApi(data, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n    const updateTable = async (id, data) =>{\r\n        try {\r\n            setLoading(true);\r\n            await updateTableApi(id, data, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n    const deleteTable = async (id) =>{\r\n        try {\r\n            setLoading(true);\r\n            await deleteTableApi(id, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    const getTable = async (idTable) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await getTableApi(idTable);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n    return {\r\n        loading,\r\n        error,\r\n        tables,\r\n        getTables,\r\n        addTable,\r\n        updateTable,\r\n        deleteTable,\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}