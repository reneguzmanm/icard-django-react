{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { getCategoriesApi, addCategoryApi, updateCategoryApi, deleteCategoryApi } from \"../api/category\";\nimport { useAuth } from \"./\";\nexport function useCategory() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [categories, setCategories] = useState(null);\n  const {\n    auth\n  } = useAuth();\n\n  const getCategories = async () => {\n    try {\n      setLoading(true);\n      const response = await getCategoriesApi();\n      setLoading(false);\n      setCategories(response);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const addCategory = async data => {\n    try {\n      setLoading(true);\n      await addCategoryApi(data, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const updateCategory = async (id, data) => {\n    try {\n      setLoading(true);\n      await updateCategoryApi(id, data, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const deleteCategory = async id => {\n    try {\n      setLoading(true);\n      await deleteCategoryApi(id, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  return {\n    loading,\n    error,\n    categories,\n    getCategories,\n    addCategory,\n    updateCategory,\n    deleteCategory\n  };\n}\n\n_s(useCategory, \"dcreQPOCb7jpVXiUOCnEnji3jI0=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"sources":["C:/Cursos/Full/icard/icard_react/icard/src/hooks/useCategory.js"],"names":["useState","getCategoriesApi","addCategoryApi","updateCategoryApi","deleteCategoryApi","useAuth","useCategory","loading","setLoading","error","setError","categories","setCategories","auth","getCategories","response","addCategory","data","token","updateCategory","id","deleteCategory"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,iBAA3C,EAA8DC,iBAA9D,QAAuF,iBAAvF;AACA,SAASC,OAAT,QAAwB,IAAxB;AAEA,OAAO,SAASC,WAAT,GAAsB;AAAA;;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAWR,OAAO,EAAxB;;AAEA,QAAMS,aAAa,GAAG,YAAY;AAC9B,QAAI;AACAN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMO,QAAQ,GAAG,MAAMd,gBAAgB,EAAvC;AACAO,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAI,MAAAA,aAAa,CAACG,QAAD,CAAb;AACH,KALD,CAKE,OAAON,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,GAVD;;AAYA,QAAMO,WAAW,GAAG,MAAOC,IAAP,IAAe;AAC/B,QAAI;AACAT,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMN,cAAc,CAACe,IAAD,EAAOJ,IAAI,CAACK,KAAZ,CAApB;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,CAIE,OAAOC,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,GATD;;AAWA,QAAMU,cAAc,GAAG,OAAOC,EAAP,EAAWH,IAAX,KAAmB;AACtC,QAAI;AACAT,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAML,iBAAiB,CAACiB,EAAD,EAAKH,IAAL,EAAWJ,IAAI,CAACK,KAAhB,CAAvB;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,CAIE,OAAOC,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,GATD;;AAWA,QAAMY,cAAc,GAAG,MAAOD,EAAP,IAAc;AACjC,QAAI;AACAZ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMJ,iBAAiB,CAACgB,EAAD,EAAKP,IAAI,CAACK,KAAV,CAAvB;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,CAIE,OAAOC,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,GATD;;AAWA,SAAM;AACFF,IAAAA,OADE;AAEFE,IAAAA,KAFE;AAGFE,IAAAA,UAHE;AAIFG,IAAAA,aAJE;AAKFE,IAAAA,WALE;AAMFG,IAAAA,cANE;AAOFE,IAAAA;AAPE,GAAN;AASH;;GA5Def,W;UAIKD,O","sourcesContent":["import { useState } from \"react\";\r\nimport { getCategoriesApi, addCategoryApi, updateCategoryApi, deleteCategoryApi } from \"../api/category\";\r\nimport { useAuth } from \"./\";\r\n\r\nexport function useCategory(){\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [categories, setCategories] = useState(null);\r\n    const { auth } = useAuth();\r\n\r\n    const getCategories = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await getCategoriesApi();\r\n            setLoading(false);\r\n            setCategories(response);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    };\r\n\r\n    const addCategory = async (data) =>{\r\n        try {\r\n            setLoading(true);\r\n            await addCategoryApi(data, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    const updateCategory = async (id, data) =>{\r\n        try {\r\n            setLoading(true);\r\n            await updateCategoryApi(id, data, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    const deleteCategory = async (id) => {\r\n        try {\r\n            setLoading(true);\r\n            await deleteCategoryApi(id, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    return{\r\n        loading,\r\n        error,\r\n        categories,\r\n        getCategories,\r\n        addCategory,\r\n        updateCategory,\r\n        deleteCategory,\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}