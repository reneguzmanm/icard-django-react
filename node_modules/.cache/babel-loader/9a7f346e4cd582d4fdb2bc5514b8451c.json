{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cursos\\\\Full\\\\icard\\\\icard_react\\\\icard\\\\src\\\\components\\\\Admin\\\\Orders\\\\AddOrderForm\\\\AddOrderForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./AddOrderForm.scss\";\nimport { Form, Image, Button, Dropdown } from 'semantic-ui-react';\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { useProduct, useOrder } from '../../../../hooks';\nimport { map } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AddOrderForm(props) {\n  _s();\n\n  const {\n    idTable,\n    openCLoseModal\n  } = props;\n  const [productsFormat, setProductsFormat] = useState([]);\n  const [productsData, setProductsData] = useState([]);\n  const {\n    products,\n    getProducts,\n    getProductById\n  } = useProduct();\n  const {\n    addOrderToTable\n  } = useOrder();\n  useEffect(() => getProducts(), []);\n  useEffect(() => setProductsFormat(formatDropdownData(products)), [products]);\n  const formik = useFormik({\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    validateOnChange: false,\n    onSubmit: async formValue => {\n      for await (const idProduct of formValue.products) {\n        await addOrderToTable(idTable, idProduct);\n      }\n    }\n  });\n  useEffect(() => addProductList(), [formik.values]);\n\n  const addProductList = async () => {\n    try {\n      const productsId = formik.values.products;\n      const arrayTemp = [];\n\n      for await (const idProduct of productsId) {\n        const response = await getProductById(idProduct);\n        arrayTemp.push(response);\n      }\n\n      setProductsData(arrayTemp);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const removeProductList = index => {\n    const idProducts = [...formik.values.products];\n    idProducts.splice(index, 1);\n    formik.setFieldValue(\"products\", idProducts);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"add-order-form\",\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n      placeholder: \"Productos\",\n      fluid: true,\n      selection: true,\n      search: true,\n      options: productsFormat,\n      value: null,\n      onChange: (_, data) => formik.setFieldValue(\"products\", [...formik.values.products, data.value])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-order-form__list\",\n      children: map(productsData, (product, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-order-form__list-product\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: product.image,\n            avatar: true,\n            size: \"tiny\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: product.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          content: \"Eliminar\",\n          basic: true,\n          color: \"red\",\n          onClick: () => removeProductList(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      content: \"A\\xF1adir productos a la mesa\",\n      primary: true,\n      fluid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddOrderForm, \"ou9Yhf1ZG2z8YL69+Mb2Iz8E4C8=\", false, function () {\n  return [useProduct, useOrder, useFormik];\n});\n\n_c = AddOrderForm;\n\nfunction formatDropdownData(data) {\n  return map(data, item => ({\n    key: item.id,\n    text: item.title,\n    value: item.id\n  }));\n}\n\nfunction initialValues() {\n  return {\n    products: []\n  };\n}\n\nfunction validationSchema() {\n  return {\n    products: Yup.array().required(true)\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddOrderForm\");","map":{"version":3,"sources":["C:/Cursos/Full/icard/icard_react/icard/src/components/Admin/Orders/AddOrderForm/AddOrderForm.js"],"names":["React","useState","useEffect","Form","Image","Button","Dropdown","useFormik","Yup","useProduct","useOrder","map","AddOrderForm","props","idTable","openCLoseModal","productsFormat","setProductsFormat","productsData","setProductsData","products","getProducts","getProductById","addOrderToTable","formatDropdownData","formik","initialValues","validationSchema","object","validateOnChange","onSubmit","formValue","idProduct","addProductList","values","productsId","arrayTemp","response","push","error","console","log","removeProductList","index","idProducts","splice","setFieldValue","handleSubmit","_","data","value","product","image","title","item","key","id","text","array","required"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./AddOrderForm.scss\";\r\nimport { Form, Image, Button, Dropdown } from 'semantic-ui-react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport { useProduct, useOrder } from '../../../../hooks';\r\nimport { map } from 'lodash';\r\n\r\n\r\nexport function AddOrderForm(props) {\r\n    const {idTable, openCLoseModal} = props;\r\n    const [productsFormat, setProductsFormat] = useState([])\r\n    const [productsData, setProductsData] = useState([])\r\n    const {products, getProducts, getProductById} = useProduct();\r\n    const { addOrderToTable} = useOrder();\r\n\r\n    useEffect(() => getProducts(), []);\r\n    useEffect(() => setProductsFormat(formatDropdownData(products)), [products]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues(),\r\n        validationSchema: Yup.object(validationSchema()),\r\n        validateOnChange: false,\r\n        onSubmit: async (formValue) => {\r\n            for await (const idProduct of formValue.products){\r\n                await addOrderToTable(idTable, idProduct)\r\n            }\r\n        },\r\n    });\r\n\r\n    useEffect(() => addProductList(), [formik.values])\r\n    \r\n\r\n    const addProductList = async () => {\r\n        try {\r\n            const productsId = formik.values.products;\r\n\r\n            const arrayTemp = [];\r\n            for await (const idProduct of productsId){\r\n                const response = await getProductById(idProduct);\r\n                arrayTemp.push(response);\r\n            }\r\n            setProductsData(arrayTemp);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeProductList = (index) => {\r\n        const idProducts = [...formik.values.products];\r\n        idProducts.splice(index, 1);\r\n        formik.setFieldValue(\"products\", idProducts);\r\n    };\r\n    \r\n  return (\r\n    <Form className='add-order-form' onSubmit={formik.handleSubmit}>\r\n        <Dropdown \r\n            placeholder='Productos' \r\n            fluid \r\n            selection \r\n            search \r\n            options={productsFormat} \r\n            value={null}\r\n            onChange={(_, data) => formik.setFieldValue(\"products\", [...formik.values.products, data.value,])}\r\n        />\r\n        <div className='add-order-form__list'>\r\n            {map(productsData, (product, index) =>(\r\n                <div className='add-order-form__list-product' key={index}>\r\n                    <div>\r\n                        <Image src={product.image} avatar size='tiny' />\r\n                        <span>{product.title}</span>\r\n                    </div>\r\n                    <Button \r\n                        type='button' \r\n                        content=\"Eliminar\"  \r\n                        basic \r\n                        color='red' \r\n                        onClick={()=> removeProductList(index)}\r\n                    />\r\n                </div>\r\n            ))}\r\n        </div>\r\n        <Button \r\n            type='submit' \r\n            content=\"Añadir productos a la mesa\"\r\n            primary \r\n            fluid \r\n        />\r\n    </Form>\r\n  );\r\n}\r\n\r\nfunction formatDropdownData(data){\r\n    return map(data, (item) => ({\r\n        key: item.id,\r\n        text: item.title,\r\n        value: item.id,\r\n    }))\r\n}\r\n\r\nfunction initialValues(){\r\n    return{\r\n        products: [],\r\n    }\r\n}\r\n\r\nfunction validationSchema(){\r\n    return{\r\n        products: Yup.array().required(true),\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}