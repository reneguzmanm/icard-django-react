{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { size } from \"lodash\";\nimport { getTablesApi, addTableApi, updateTableApi, deleteTableApi, getTableApi, getTableByNumberApi } from \"../api/table\";\nimport { useAuth } from \"./\";\nexport function useTable() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [tables, setTables] = useState(null);\n  const [table, setTable] = useState(null);\n  const {\n    auth\n  } = useAuth();\n\n  const getTables = async () => {\n    try {\n      setLoading(true);\n      const response = await getTablesApi(auth.token);\n      setLoading(false);\n      setTables(response);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const addTable = async data => {\n    try {\n      setLoading(true);\n      await addTableApi(data, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const updateTable = async (id, data) => {\n    try {\n      setLoading(true);\n      await updateTableApi(id, data, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const deleteTable = async id => {\n    try {\n      setLoading(true);\n      await deleteTableApi(id, auth.token);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const getTable = async idTable => {\n    try {\n      setLoading(true);\n      const response = await getTableApi(idTable);\n      setLoading(false);\n      setTable(response);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  const isExistTable = async tableNumber => {\n    try {\n      const response = await getTableByNumberApi(tableNumber);\n      if (size(response) === 0) throw Error();\n      return true;\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  const getTableByNumber = async tableNumber => {\n    try {\n      const response = await getTableByNumberApi(tableNumber);\n      return response;\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  return {\n    loading,\n    error,\n    tables,\n    table,\n    getTables,\n    addTable,\n    updateTable,\n    deleteTable,\n    getTable,\n    isExistTable,\n    getTableByNumberApi\n  };\n}\n\n_s(useTable, \"YtbWTuuikY/+ktb5Q2/S08hMNX4=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"sources":["C:/Cursos/Full/icard/icard_react/icard/src/hooks/useTable.js"],"names":["useState","size","getTablesApi","addTableApi","updateTableApi","deleteTableApi","getTableApi","getTableByNumberApi","useAuth","useTable","loading","setLoading","error","setError","tables","setTables","table","setTable","auth","getTables","response","token","addTable","data","updateTable","id","deleteTable","getTable","idTable","isExistTable","tableNumber","Error","getTableByNumber"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { size } from \"lodash\";\r\nimport { getTablesApi, addTableApi, updateTableApi, deleteTableApi, getTableApi, getTableByNumberApi } from \"../api/table\";\r\nimport { useAuth } from \"./\";\r\n\r\nexport function useTable(){\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [tables, setTables] = useState(null);\r\n    const [table, setTable] = useState(null);\r\n\r\n    const { auth } = useAuth();\r\n\r\n    const getTables = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await getTablesApi(auth.token);\r\n            setLoading(false);\r\n            setTables(response);    \r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    };\r\n\r\n    const addTable = async (data) =>{\r\n        try {\r\n            setLoading(true);\r\n            await addTableApi(data, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n    const updateTable = async (id, data) =>{\r\n        try {\r\n            setLoading(true);\r\n            await updateTableApi(id, data, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n    const deleteTable = async (id) =>{\r\n        try {\r\n            setLoading(true);\r\n            await deleteTableApi(id, auth.token);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    const getTable = async (idTable) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await getTableApi(idTable);\r\n            setLoading(false);\r\n            setTable(response);\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    const isExistTable = async (tableNumber) =>{\r\n        try {\r\n            const response = await getTableByNumberApi(tableNumber);\r\n            if(size(response) === 0) throw Error();\r\n            return true;\r\n        } catch (error) {\r\n            setError(error);\r\n        }\r\n    };\r\n\r\n    const getTableByNumber = async (tableNumber) =>{\r\n        try {\r\n            const response = await getTableByNumberApi(tableNumber);\r\n            return response;\r\n        } catch (error) {\r\n            setError(error);\r\n        }\r\n    }\r\n    return {\r\n        loading,\r\n        error,\r\n        tables,\r\n        table,\r\n        getTables,\r\n        addTable,\r\n        updateTable,\r\n        deleteTable,\r\n        getTable,\r\n        isExistTable,\r\n        getTableByNumberApi,\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}